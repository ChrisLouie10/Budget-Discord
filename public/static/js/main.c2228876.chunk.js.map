{"version":3,"sources":["components/auth/Signup.js","components/auth/Dashboard.js","components/auth/Login.js","components/groupserver/textchat/TextChannel.js","components/popups/InviteForm.js","components/popups/CreateChannelForm.js","components/popups/DeleteChannelForm.js","components/popups/DeleteGroupServerForm.js","components/popups/LeaveGroupServerForm.js","components/popups/Actions.js","components/ServerSidebar.js","components/groupserver/GroupServer.js","components/auth/Loading.js","components/groupserver/JoinGroupServer.js","components/popups/Popup.js","components/popups/CreateServerForm.js","components/ServersList.js","components/auth/PrivateRoute.js","components/friends/FriendRequests.js","components/friends/FriendsList.js","components/friends/SearchFriends.js","components/friends/Friends.js","components/auth/ChangeName.js","components/auth/DeleteAccount.js","components/auth/ChangePassword.js","components/App.js","index.js"],"names":["Signup","nameRef","useRef","emailRef","passwordRef","passwordConfirmRef","useState","error","setError","loading","setLoading","history","useHistory","e","a","preventDefault","current","value","fetch","method","headers","body","JSON","stringify","name","email","password","then","response","json","data","success","localStorage","setItem","Authorization","push","message","className","style","minHeight","maxWidth","role","onSubmit","id","htmlFor","type","ref","required","disabled","to","Dashboard","props","getItem","removeItem","statusText","user","number_id","onClick","Login","mounted","setMounted","useEffect","TextChannel","input","setInput","chatLogs","textChannelId","userId","_id","chatLog","setChatLogs","background","aria-orientation","height","position","overflowY","Object","entries","map","key","notSent","author","Date","timestamp","toLocaleString","content","color","displayChat","bottom","onChange","target","index","keys","length","sendMessage","InviteForm","controller","AbortController","signal","inviteUrl","setInviteUrl","expiration","setExpiration","limit","setLimit","groupServerId","parseInt","code","groupServers","inviteCode","setGroupServers","abort","readOnly","CreateChannelForm","newTextChannelId","textChannels","textChannel","setOpenPopup","aria-describedby","DeleteChannelForm","textChannelName","numOfTextChannels","console","log","deleteCurrentChannel","DeleteGroupServerForm","groupServerName","deleteCurrentServer","LeaveGroupServerForm","setUser","leaveGroupServer","Actions","openPopup","Dialog","open","onEscapeKeyDown","actionDialog","DialogTitle","DialogContent","owner","admin","setActionDialog","ServersList","setGroupServerName","openPopupActions","setOpenPopupActions","handleRightClick","nativeEvent","which","onContextMenu","pathname","displayTextChannels","GroupServer","userAccess","setUserAccess","computedMatch","params","access","Loading","width","JoinGroupServer","groupServer","Popup","title","children","others","React","cloneElement","CreateServerForm","openPopupCreate","setOpenPopupCreate","displayServers","require","config","ws","WebSocket","PrivateRoute","Component","component","rest","setSuccess","_setUser","userRef","_setChatLogs","chatLogsRef","waitForWSConnection","callback","interval","readyState","OPEN","setTimeout","handleWSSMessage","parsedMessage","parse","_chatLogs","serverId","send","addEventListener","catch","render","undefined","FriendRequests","pressed","setPressed","friendID","friend","numberID","FriendsList","SearchFriends","Friend","friendNameRef","friendNumberRef","friends","setFriends","friendResults","setFriendResults","showFriendRequests","setShowFriendRequests","friendRequests","setFriendRequests","friendName","friendNumber","friendResult","Alert","variant","Form","Group","Label","Control","Button","ChangeName","DeleteAccount","ChangePassword","oldPasswordRef","oldPassword","App","exact","path","Friends","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c2228876.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\n// Simple Signup page\r\n\r\nexport default function Signup() {\r\n  const nameRef = useRef();\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n  const passwordConfirmRef = useRef();\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState();\r\n  const history = useHistory();\r\n\r\n  async function handleSubmit(e){\r\n    e.preventDefault();\r\n\r\n    if(passwordRef.current.value !== passwordConfirmRef.current.value){\r\n      return setError('Passwords do not match');\r\n    }\r\n    setError('');\r\n    setLoading(true);\r\n    try{\r\n      fetch('http://localhost:3000/api/user/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          name: nameRef.current.value,\r\n          email: emailRef.current.value,\r\n          password: passwordRef.current.value\r\n        })\r\n      }).then(response => { return response.json()})\r\n        .then(data => {\r\n        if(!data.success) setError(data.message);\r\n        else {\r\n          localStorage.setItem('Authorization', data.Authorization);\r\n          history.push(\"/dashboard\");\r\n        }\r\n      });\r\n    }\r\n    finally{\r\n      setLoading(false);\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container d-flex align-items-center justify-content-center\"\r\n        style={{minHeight: \"100vh\"}}>\r\n      <div className=\"w-100\" style={{maxWidth: \"400px\"}}>\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <div className=\"card-header text-center mb-4\">\r\n              <h2>Sign Up</h2>\r\n            </div>\r\n            {error && <div className=\"alert alert-danger\" role=\"alert\">{error}</div>}\r\n            <form onSubmit={handleSubmit}>\r\n              <div className=\"mb-3\" id=\"name\">\r\n              <label htmlFor=\"input-name\">Name</label>\r\n                <input type=\"name\" className=\"form-control\" id=\"input-name\" ref={nameRef} required></input>\r\n              </div>\r\n              <div className=\"mb-3\" id=\"email\">\r\n              <label htmlFor=\"input-email\">Email</label>\r\n                <input type=\"email\" className=\"form-control\" id=\"input-email\" ref={emailRef} required></input>\r\n              </div>\r\n              <div className=\"mb-3\" id=\"password\">\r\n              <label htmlFor=\"input-password\">Password</label>\r\n                <input className=\"form-control\" type=\"password\" id=\"input-password\" ref={passwordRef} required></input>\r\n              </div>\r\n              <div className=\"mb-3\" id=\"password-confirm\">\r\n              <label htmlFor=\"input-password-confirm\">Confirm Password</label>\r\n                <input className=\"form-control\" type=\"password\" id=\"input-password-confirm\" ref={passwordConfirmRef} required></input>\r\n              </div>\r\n              <button disabled={loading} className=\"btn btn-primary w-25\" type=\"Submit\">Submit</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-center mt-2\">\r\n          Already have an account? <Link to=\"/login\">Log In</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n// Simple private account information.\r\n\r\nexport default function Dashboard(props) {\r\n\r\n  const [error, setError] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  async function handleLogout(){\r\n    setError('');\r\n\r\n    await fetch('http://localhost:3000/api/user/logout', {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': localStorage.getItem('Authorization')\r\n      }\r\n    }).then(response => { return response.json()})\r\n      .then(data => {\r\n      if(!data.success) setError(response.statusText);\r\n      else{\r\n        localStorage.removeItem('Authorization');\r\n        history.push('/login');\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-11 my-auto\">\r\n      <div className=\"card mx-auto\" style={{maxWidth: \"400px\"}}>\r\n        <div className=\"card-body\">\r\n          <div className=\"card-header text-center mb-4\">\r\n            <h2>Profile</h2>\r\n          </div>\r\n          {error && <div className=\"alert alert-danger\" role=\"alert\">{error}</div>}\r\n          <div>\r\n            <strong>Name:</strong> {props.user.name} #{props.user.number_id}\r\n          </div>\r\n          <div>\r\n            <strong>Email:</strong> {props.user.email}\r\n          </div>\r\n          <Link to=\"/change-name\" className=\"btn btn-primary w-100 mt-3\">Change Name</Link>\r\n          <Link to=\"/change-password\" className=\"btn btn-primary w-100 mt-3\">Change Password</Link>\r\n          <Link to=\"/delete-account\" className=\"btn btn-danger w-100 mt-3\">Delete Account</Link>\r\n        </div>\r\n      </div>\r\n      <div className=\"w-100 text-center mt-2\">\r\n        <button type=\"button\" className=\"btn btn-link\" onClick={handleLogout}>Log Out</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\n// Simple Login page\r\n\r\nexport default function Login() {\r\n\r\n  const [mounted, setMounted] = useState(true);\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    return function cleanup(){\r\n      setMounted(false);\r\n    }\r\n  }, []);\r\n\r\n  async function handleSubmit(e){\r\n    e.preventDefault();\r\n\r\n    try{\r\n      setError('');\r\n      setLoading(true);\r\n      await fetch('http://localhost:3000/api/user/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          email: emailRef.current.value,\r\n          password: passwordRef.current.value\r\n        })\r\n      }).then(response => {\r\n        return response.json()})\r\n        .then((data) => {\r\n          if(data.success){\r\n            localStorage.setItem('Authorization', data.Authorization);\r\n            history.push(\"/dashboard\");\r\n          } else setError(data.message);\r\n        })\r\n    }\r\n    finally{\r\n      if (mounted) setLoading(false);\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"container d-flex align-items-center justify-content-center\"\r\n        style={{minHeight: \"100vh\"}}>\r\n      <div className=\"w-100\" style={{maxWidth: \"400px\"}}>\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <div className=\"card-header text-center mb-4\">\r\n             <h2>Log In</h2>\r\n            </div>\r\n            {error && <div className=\"alert alert-danger\" role=\"alert\">{error}</div>}\r\n            <form onSubmit={handleSubmit}>\r\n              <div className=\"mb-3\" id=\"email\">\r\n                <label htmlFor=\"input-email\">Email</label>\r\n                <input type=\"email\" className=\"form-control\" id=\"input-email\" ref={emailRef} required></input>\r\n              </div>\r\n              <div className=\"mb-3\" id=\"password\">\r\n                <label htmlFor=\"input-password\">Password</label>\r\n                <input type=\"password\" className=\"form-control\" id=\"input-password\" ref={passwordRef} required></input>\r\n              </div>\r\n              <button disabled={loading} className=\"btn btn-primary w-25\" type=\"Submit\">Login</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-center mt-2\">\r\n          Need an account? <Link to=\"/signup\">Sign Up</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nexport default function TextChannel(props){\r\n\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  useEffect(async ()=>{\r\n    //If the chat log for the text channel with the id \"props.textChannelId\"\r\n    //doesn't exist in the client, then retrieve it from the server\r\n    if (!props.chatLogs[props.textChannelId]){\r\n      await fetch('http://localhost:3000/api/groupServer/get-chat-log', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': localStorage.getItem('Authorization')\r\n        },\r\n        body: JSON.stringify({\r\n          type: 'get-chat-log',\r\n          userId: props.user._id,\r\n          textChannelId: props.textChannelId\r\n        })\r\n      })\r\n        .then(response => { return response.json(); })\r\n          .then((data) => {\r\n            let chatLogs = {...props.chatLogs};\r\n            chatLogs[props.textChannelId] = data.chatLog; \r\n            props.setChatLogs(chatLogs);\r\n          });\r\n    }\r\n  }, [props.textChannelId]);\r\n\r\n  function handleChatBoxSubmit(e){\r\n    e.preventDefault();\r\n    //Check whether input is not just an empty string\r\n    if (input !== \"\"){\r\n        //Create a message object\r\n        const message = {\r\n          content: input,\r\n          index: Object.keys(props.chatLogs).length + 1,\r\n          author: props.user.name,\r\n          timestamp: new Date(),\r\n          notSent: true\r\n        }\r\n        //Send the message object over to client\r\n        props.chatLogs[props.textChannelId].push(message);\r\n        //Send the message object over to the server\r\n        props.sendMessage(message);\r\n        //Clear chat box\r\n        setInput(\"\");\r\n    }\r\n  }\r\n\r\n  function handleChatBoxChange(e){\r\n      setInput(e.target.value);\r\n  };\r\n\r\n  //Displays messages\r\n  //If a message is not \"sent\" then it will be displayed with a dark gray color\r\n  //Otherwise, sent messages will be light gray\r\n  function displayChat(){\r\n    if (props.chatLogs[props.textChannelId]){\r\n        return(\r\n          <div className=\"row\">\r\n              <div className=\"col-12\" aria-orientation=\"vertical\" style={{height: \"100%\", position: \"absolute\", overflowY: \"scroll\"}}>\r\n              {\r\n                Object.entries(props.chatLogs[props.textChannelId]).map(([key, value]) => {\r\n                  if (value.notSent){\r\n                    return(\r\n                      <p className=\"ml-2 #858585\" key={key}>\r\n                        {value.author} ({new Date(value.timestamp).toLocaleString()}):<br />{value.content}\r\n                      </p>\r\n                    );\r\n                  }\r\n                  else{\r\n                    return(\r\n                      <p className=\"ml-2\" style={{color: \"#c2c2c2\"}} key={key}>\r\n                        {value.author} ({new Date(value.timestamp).toLocaleString()}):<br />{value.content}\r\n                      </p>\r\n                    );\r\n                  }\r\n                })\r\n              }\r\n              </div>\r\n          </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-10 align-self-end w-100\" style={{minHeight: \"100vh\", background: \"#303030\"}}>\r\n        {displayChat()}\r\n        <form className=\"w-75 mb-2\" style={{position: \"absolute\", bottom: \"0\"}}>\r\n            <div className=\"form-row\" >\r\n                <div className=\"col\">\r\n                    <input type=\"text\" className=\"form-control \" id=\"chatBox\" value={input} onChange={handleChatBoxChange} />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\" onClick={handleChatBoxSubmit}>Send</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n  );\r\n};","import React, { useState, useEffect } from 'react';\r\n\r\nexport default function InviteForm(props){\r\n\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n    const [loading, setLoading] = useState(false);\r\n    const [inviteUrl, setInviteUrl] = useState(\"\");\r\n    const [expiration, setExpiration] = useState(\"30\");\r\n    const [limit, setLimit] = useState(\"1\");\r\n\r\n    useEffect(()=>{\r\n        if (props.groupServers[props.groupServerId].inviteCode)\r\n            setInviteUrl(\"http://localhost:5000/join/\"+props.groupServers[props.groupServerId].inviteCode);\r\n        return function cleanup(){\r\n            controller.abort();\r\n        }\r\n    }, []);\r\n\r\n    async function generateInviteLink(e){\r\n        e.preventDefault();\r\n        setLoading(true);\r\n\r\n        try{\r\n            await fetch('http://localhost:3000/api/groupServer/create-invite', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': localStorage.getItem('Authorization')\r\n                },\r\n                body: JSON.stringify({\r\n                    type: 'create-invite',\r\n                    userId: props.userId,\r\n                    groupServerId: props.groupServerId,\r\n                    expiration: parseInt(expiration),\r\n                    limit: parseInt(limit)\r\n                }),\r\n                signal\r\n            }).then(response => { return response.json(); })\r\n                .then((data) => {\r\n                    if (data.success){\r\n                        setInviteUrl(\"http://localhost:5000/join/\"+data.code);\r\n                        let groupServers = {...props.groupServers};\r\n                        groupServers[props.groupServerId].inviteCode = data.code;\r\n                        props.setGroupServers({...groupServers}); \r\n                    }\r\n                })\r\n        }finally{ setLoading(false); }\r\n    }\r\n\r\n    function handleExpirationChange(e){\r\n        setExpiration(e.target.value);\r\n    }\r\n\r\n    function handleLimitChange(e){\r\n        setLimit(e.target.value);\r\n    }\r\n\r\n    function handleChange(e){\r\n        setInviteUrl(e.target.value);\r\n    }\r\n\r\n    return(\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"expire\">Expire After</label>\r\n                <select id=\"expire\" value={expiration} onChange={handleExpirationChange} className=\"form-control\">\r\n                    <option value=\"30\">30 minutes</option>\r\n                    <option value=\"60\">1 hour</option>\r\n                    <option value=\"360\">6 hours</option>\r\n                    <option value=\"720\">12 hours</option>\r\n                    <option value=\"1440\">1 day</option>\r\n                    <option value=\"-1\">Never</option>\r\n                </select>\r\n                <label htmlFor=\"limit\">Max number of uses</label>\r\n                <select id=\"limit\" value={limit} onChange={handleLimitChange} className=\"form-control\">\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"5\">5</option>\r\n                    <option value=\"10\">10</option>\r\n                    <option value=\"50\">50</option>\r\n                    <option value=\"100\">100</option>\r\n                    <option value=\"-1\">No Limit</option>\r\n                </select>\r\n            </div>\r\n            <button type=\"submit\" disabled={loading} className=\"btn btn-primary\" onClick={generateInviteLink}>Generate New Invite Link</button>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"invite\">Invite Link</label>\r\n                <input className=\"form-control\" type=\"text\" value={inviteUrl} onChange={handleChange} readOnly/>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React, { useState, useEffect} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function CreateChannelForm(props){\r\n\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n    const [input, setInput] = useState(\"new-channel\");\r\n    const [loading, setLoading] = useState(false);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        return function cleanup(){\r\n            controller.abort();\r\n        }\r\n    }, []);\r\n\r\n    async function handleSubmit(e){\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        let newTextChannelId;\r\n        try{\r\n            await fetch('http://localhost:3000/api/groupServer/create-channel', {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': localStorage.getItem('Authorization')\r\n              },\r\n              body: JSON.stringify({\r\n                type: \"create-channel\",\r\n                name: input,\r\n                userId: props.userId,\r\n                groupServerId: props.groupServerId\r\n              }),\r\n              signal\r\n            }).then(response => { return response.json(); })\r\n                .then((data) => {\r\n                    if(data.success) {\r\n                        let groupServers = {...props.groupServers};\r\n                        newTextChannelId = data.textChannelId;\r\n                        groupServers[props.groupServerId].textChannels[newTextChannelId] = data.textChannel;\r\n                        props.setGroupServers({...groupServers});\r\n                        setLoading(false);\r\n                        props.setOpenPopup(false);\r\n                    }\r\n                });\r\n        }finally{\r\n            if (newTextChannelId)\r\n                history.push(\"/group/\"+props.groupServerId+\"/\"+newTextChannelId);\r\n            else history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    return(\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"createServerInput\">Group Server Name</label>\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    id=\"createServerInput\" \r\n                    aria-describedby=\"serverInputHelp\" \r\n                    value={input}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </div>\r\n            <button type=\"submit\" disabled={loading} className=\"btn btn-primary\" onClick={handleSubmit}>Create</button>\r\n        </form>\r\n    );\r\n};","import React, {useState, useEffect} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function DeleteChannelForm(props){\r\n\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n    const history = useHistory();\r\n    const [textChannelName] = useState(props.groupServers[props.groupServerId].textChannels[props.textChannelId].name);\r\n    const [input, setInput] = useState(\"\");\r\n    const [mounted, setMounted] = useState(true);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        return function(){\r\n            setMounted(false);\r\n            controller.abort();\r\n        };\r\n    }, []);\r\n\r\n    async function deleteCurrentChannel(){\r\n        //We want group servers to have at least one channel. So don't delete if there is only one channel left.\r\n        const numOfTextChannels = Object.keys(props.groupServers[props.groupServerId].textChannels).length;\r\n        if (mounted &&  numOfTextChannels > 1){\r\n            setLoading(true);\r\n            await fetch('http://localhost:3000/api/groupServer/delete-channel', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': localStorage.getItem('Authorization')\r\n                },\r\n                body: JSON.stringify({\r\n                    type: \"delete-channel\",\r\n                    groupServerId: props.groupServerId,\r\n                    textChannelId: props.textChannelId,\r\n                    userId: props.userId\r\n                }),\r\n                signal\r\n            }).then(response => { return response.json(); })\r\n                .then((data) => {\r\n                    if (data.success){\r\n                        history.push(\"/dashboard\");\r\n                        let groupServers = {...props.groupServers};\r\n                        delete groupServers[props.groupServerId].textChannels[props.textChannelId];\r\n                        props.setGroupServers({...groupServers});\r\n                    }\r\n                    else console.log(data.message);\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleInputChange(e){\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        if (input === textChannelName) deleteCurrentChannel();\r\n    }\r\n\r\n    return(\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <p>Type \"{textChannelName}\" to confirm deletion</p>\r\n                <input \r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"deleteInput\"\r\n                    value={input}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </div>\r\n            <button type=\"submit\" disabled={loading} className=\"btn btn-danger\" onClick={handleSubmit}>Confirm</button>\r\n        </form>\r\n    );\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function DeleteGroupServerForm(props){\r\n\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n    const [mounted, setMounted] = useState(true);\r\n    const history = useHistory();\r\n    const [input, setInput] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        return function(){\r\n            setMounted(false);\r\n            controller.abort();\r\n        };\r\n    }, []);\r\n\r\n    async function deleteCurrentServer(){\r\n        if (props.groupServerId && mounted){\r\n            setLoading(true);\r\n            await fetch('http://localhost:3000/api/groupServer/delete', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': localStorage.getItem('Authorization')\r\n                },\r\n                body: JSON.stringify({\r\n                    type: \"delete\",\r\n                    groupServerId: props.groupServerId,\r\n                    userId: props.userId\r\n                }),\r\n                signal\r\n            }).then(response => { return response.json(); })\r\n                .then((data) => {\r\n                    if (data.success){\r\n                        history.push(\"/dashboard\");\r\n                        let groupServers = {...props.groupServers};\r\n                        delete groupServers[props.groupServerId];\r\n                        props.setGroupServers({...groupServers});\r\n                    }\r\n                    else console.log(data.message);\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleInputChange(e){\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        if (input === props.groupServerName) deleteCurrentServer();\r\n    }\r\n\r\n    return(\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <p>Type \"{props.groupServerName}\" to confirm deletion</p>\r\n                <input \r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"deleteInput\"\r\n                    value={input}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </div>\r\n            <button type=\"submit\" disabled={loading} className=\"btn btn-danger\" onClick={handleSubmit}>Confirm</button>\r\n        </form>\r\n    );\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function LeaveGroupServerForm(props){\r\n\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n    const [mounted, setMounted] = useState(true);\r\n    const history = useHistory();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        return function(){\r\n            setMounted(false);\r\n            controller.abort();\r\n        };\r\n    }, []);\r\n\r\n    async function leaveGroupServer(){\r\n        if (props.groupServerId && mounted){\r\n            setLoading(true);\r\n            await fetch('http://localhost:3000/api/groupServer/leave', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': localStorage.getItem('Authorization')\r\n                },\r\n                body: JSON.stringify({\r\n                    type: \"leave\",\r\n                    groupServerId: props.groupServerId,\r\n                    userId: props.userId\r\n                }),\r\n                signal\r\n            }).then(response => { return response.json(); })\r\n                .then((data) => {\r\n                    if (data.success && mounted){\r\n                        history.push(\"/dashboard\");\r\n                        let groupServers = {...props.groupServers};\r\n                        delete groupServers[props.groupServerId];\r\n                        props.setGroupServers({...groupServers})\r\n                        props.setUser(data.user);\r\n                    }\r\n                    else console.log(data.message);\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        leaveGroupServer();\r\n    }\r\n\r\n    function handleCancel(e){\r\n        e.preventDefault();\r\n        props.setOpenPopup(false);\r\n    }\r\n\r\n    return(\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <p>\r\n                    Are you sure you want to leave {props.groupServerName}? You won't\r\n                    be able to rejoin unless you are re-invited.\r\n                </p>\r\n            </div>\r\n            <button type=\"submit\" disabled={loading} className=\"btn\" onClick={handleCancel}>Cancel</button>\r\n            <button type=\"submit\" disabled={loading} className=\"btn btn-danger\" onClick={handleSubmit}>Leave</button>\r\n        </form>\r\n    );\r\n}","import React from 'react';\r\nimport {Dialog, DialogTitle, DialogContent } from '@material-ui/core';\r\nimport InviteForm from './InviteForm.js';\r\nimport CreateChannelForm from \"./CreateChannelForm.js\";\r\nimport DeleteChannelForm from \"./DeleteChannelForm.js\";\r\nimport DeleteGroupServerForm from \"./DeleteGroupServerForm.js\";\r\nimport LeaveGroupServerForm from \"./LeaveGroupServerForm.js\";\r\n\r\nexport default function Actions(props){\r\n    const {openPopup, setOpenPopup} = props;\r\n\r\n    function onEscapeKeyDown(){\r\n        setOpenPopup(false);\r\n    }\r\n\r\n    function displayContents(){\r\n        if (props.actionDialog === 0){\r\n            return(\r\n                <>\r\n                    <DialogTitle>\r\n                        <div>{\"Actions\"}</div>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <ul className=\"list-unstyled\">\r\n                        {\r\n                            (props.groupServers[props.groupServerId].owner ||\r\n                            props.groupServers[props.groupServerId].admin) ?\r\n                            <>\r\n                                <li onClick = {() => props.setActionDialog(1)}>\r\n                                    <a className=\"text-reset\" role=\"button\">Invite</a>\r\n                                </li>\r\n                                <li onClick = {() => props.setActionDialog(2)}>\r\n                                    <a className=\"text-reset\" role=\"button\">Create Channel</a>\r\n                                </li>\r\n                                <li onClick = {() => props.setActionDialog(3)}>\r\n                                    <a className=\"text-reset\" role=\"button\">Delete Current Channel</a>\r\n                                </li>\r\n                                <li onClick = {() => props.setActionDialog(4)}>\r\n                                    <a className=\"text-reset\" role=\"button\">Delete Group Server</a>\r\n                                </li>\r\n                            </>\r\n                            : <></>\r\n                        }\r\n                        {\r\n                            (!props.groupServers[props.groupServerId].owner) ?\r\n                            <>\r\n                                <li onClick = {() => props.setActionDialog(5)}>\r\n                                    <a className=\"text-reset\" role=\"button\">Leave Group Server</a>\r\n                                </li>\r\n                            </>\r\n                            : <></>\r\n                        }\r\n                        </ul>\r\n                    </DialogContent>\r\n                </>\r\n            )\r\n        }\r\n        else if (props.actionDialog === 1){\r\n            return(\r\n                <>\r\n                    <DialogTitle>\r\n                        <div>Invite</div>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <InviteForm\r\n                            userId={props.user._id}\r\n                            groupServers={props.groupServers}\r\n                            setGroupServers={props.setGroupServers}\r\n                            groupServerId={props.groupServerId}\r\n                        />\r\n                    </DialogContent>\r\n                </>\r\n            );\r\n        }\r\n        else if (props.actionDialog === 2){\r\n            return(\r\n                <>\r\n                    <DialogTitle>\r\n                        <div>Create Channel</div>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <CreateChannelForm\r\n                            userId={props.user._id}\r\n                            groupServerId={props.groupServerId}\r\n                            groupServers={props.groupServers}\r\n                            setGroupServers={props.setGroupServers}\r\n                            setOpenPopup={props.setOpenPopup}\r\n                        />\r\n                    </DialogContent>\r\n                </>\r\n            );\r\n        }\r\n        else if (props.actionDialog === 3){\r\n            return(\r\n                <>\r\n                    <DialogTitle>\r\n                        <div>Delete Current Channel</div>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DeleteChannelForm\r\n                            userId={props.user._id}\r\n                            textChannelId={props.textChannelId}\r\n                            groupServerId={props.groupServerId}\r\n                            groupServers={props.groupServers}\r\n                            setGroupServers={props.setGroupServers}\r\n                        />\r\n                    </DialogContent>\r\n                </>\r\n            );\r\n        }\r\n        else if (props.actionDialog === 4){\r\n            return(\r\n                <>\r\n                    <DialogTitle>\r\n                        <div>Delete Group Server</div>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DeleteGroupServerForm\r\n                            userId={props.user._id}\r\n                            groupServers={props.groupServers}\r\n                            setGroupServers={props.setGroupServers}\r\n                            groupServerId={props.groupServerId}\r\n                            groupServerName={props.groupServerName}\r\n                        />\r\n                    </DialogContent>\r\n                </>\r\n            );\r\n        }\r\n        else if (props.actionDialog === 5){\r\n            return(\r\n                <>\r\n                    <DialogTitle>\r\n                            <div>Leave {props.groupServerName}</div>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <LeaveGroupServerForm\r\n                            userId={props.user._id}\r\n                            setUser={props.setUser}\r\n                            groupServers={props.groupServers}\r\n                            setGroupServers={props.setGroupServers}\r\n                            groupServerId={props.groupServerId}\r\n                            groupServerName={props.groupServerName}\r\n                            setOpenPopup={props.setOpenPopup}\r\n                        />\r\n                    </DialogContent>\r\n                </> \r\n            );\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Dialog open={openPopup} maxWidth=\"md\" onEscapeKeyDown={onEscapeKeyDown}>\r\n            {displayContents()}\r\n        </Dialog>    \r\n    );\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport RightClickMenu from \"./popups/RightClickMenu.js\";\r\nimport Actions from \"./popups/Actions.js\";\r\n\r\nexport default function ServersList(props){\r\n\r\n    const [mounted, setMounted] = useState(true);\r\n    const [groupServerName, setGroupServerName] = useState(\"Group Server\");\r\n    const [actionDialog, setActionDialog] = useState(0);\r\n    const [openPopupActions, setOpenPopupActions] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        return function cleanup(){\r\n            setMounted(false);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (props.groupServers){\r\n            setGroupServerName(props.groupServers[props.groupServerId].name);\r\n        }\r\n    }, [props.groupServerId]);\r\n\r\n    function handleRightClick(e){\r\n        if (e.nativeEvent.which === 3 || e.type === \"contextmenu\"){\r\n            e.preventDefault();\r\n        }\r\n    };\r\n\r\n    function displayTextChannels(){\r\n        if (props.groupServers[props.groupServerId]){ \r\n            return(\r\n                <>\r\n                {\r\n                    Object.entries(props.groupServers[props.groupServerId].textChannels).map(([key, value]) => {\r\n                        return(\r\n                            <li key={key}>\r\n                            {\r\n                                props.textChannelId === key ?\r\n                                <Link style={{color: \"#b5fff3\"}} onContextMenu={handleRightClick} to={{pathname: \"/group/\"+props.groupServerId+\"/\"+key}}>\r\n                                    {value.name}\r\n\r\n                                </Link>\r\n                                :\r\n                                <Link className=\"text-reset\" onContextMenu={handleRightClick} to={{pathname: \"/group/\"+props.groupServerId+\"/\"+key}}>\r\n                                    {value.name}\r\n\r\n                                </Link>\r\n                            }\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n            <nav id=\"server-side-bar\">\r\n                <div className=\"row\">\r\n                    <h5 className=\"text-white\">{groupServerName}</h5>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <ul className=\"list-unstyled text-white\">\r\n                    <li onClick = {() => {if(!openPopupActions) {setOpenPopupActions(true); setActionDialog(0);}}}>\r\n                        <Link className=\"text-reset\" to=\"#\">Actions</Link>  \r\n                            <Actions\r\n                                mounted={mounted}\r\n                                openPopup={openPopupActions}\r\n                                setOpenPopup={setOpenPopupActions}\r\n                                actionDialog={actionDialog}\r\n                                setActionDialog={setActionDialog}\r\n                                user = {props.user}\r\n                                setUser = {props.setUser}\r\n                                groupServerName = {groupServerName}\r\n                                groupServers = {props.groupServers}\r\n                                setGroupServers = {props.setGroupServers}\r\n                                groupServerId = {props.groupServerId}\r\n                                textChannelId = {props.textChannelId}\r\n                                />\r\n                    </li>\r\n                    {displayTextChannels()}\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n    );\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport TextChannel from './textchat/TextChannel.js';\r\nimport ServerSidebar from '../ServerSidebar.js';\r\n\r\nexport default function GroupServer(props){\r\n    \r\n    const [mounted, setMounted] = useState(true);\r\n    const [loading, setLoading] = useState(true);\r\n    const [userAccess, setUserAccess] = useState(false);\r\n\r\n    useEffect(async () => {\r\n        return function cleanup(){\r\n            setMounted(false);\r\n        }\r\n    }, []);\r\n\r\n    //Upon intialization, verify that the user is authorized to be in the group server\r\n    //If the user is not authorized, userAccess = false which redirects the user to \"/dashboard\"\r\n    useEffect(async ()=>{\r\n        if (props.user){\r\n            try{\r\n                await fetch('http://localhost:3000/api/groupServer/verify', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': localStorage.getItem('Authorization')\r\n                    },\r\n                    body: JSON.stringify({\r\n                        type: 'verify',\r\n                        userId: props.user._id,\r\n                        groupServerId: props.computedMatch.params.groupServerId,\r\n                        textChannelId: props.computedMatch.params.textChannelId ? \r\n                                        props.computedMatch.params.textChannelId : \r\n                                        Object.keys(props.groupServers[groupServerId].textChannels)[0]\r\n                    })\r\n                }).then(response => { return response.json(); })\r\n                    .then(async (data) => {\r\n                        if (mounted) {\r\n                            setUserAccess(data.access);\r\n                        }\r\n                    })\r\n            } finally{\r\n                if (mounted) setLoading(false);\r\n            }\r\n        }\r\n        else setUserAccess(false);\r\n    }, [props.computedMatch.params.groupServerId]);\r\n\r\n    function sendMessage(message){\r\n        const groupServerId = props.computedMatch.params.groupServerId;\r\n        const textChannelId = props.computedMatch.params.textChannelId ? \r\n                                props.computedMatch.params.textChannelId : Object.keys(props.groupServers[groupServerId].textChannels)[0];\r\n\r\n        //Send message over to server\r\n        props.sendMessage(message, groupServerId, textChannelId);\r\n    }\r\n\r\n    return(\r\n       <>\r\n           {\r\n               loading ?\r\n               <p>Loading</p>\r\n               :\r\n                ((userAccess) ? \r\n                (\r\n                    <>\r\n                        <div className=\"col-1\" style={{minHeight: \"100vh\", background: \"#292929\"}}>\r\n                            <ServerSidebar \r\n                            user={props.user} \r\n                            setUser={props.setUser} \r\n                            groupServers={props.groupServers} \r\n                            setGroupServers={props.setGroupServers}\r\n                            groupServerId={props.computedMatch.params.groupServerId}\r\n                            textChannelId={props.computedMatch.params.textChannelId ? \r\n                                        props.computedMatch.params.textChannelId : Object.keys(props.groupServers[props.computedMatch.params.groupServerId].textChannels)[0]}\r\n                            />\r\n                        </div>\r\n                        <TextChannel \r\n                        sendMessage={sendMessage} \r\n                        chatLogs={props.chatLogs} \r\n                        setChatLogs={props.setChatLogs}\r\n                        textChannelId={props.computedMatch.params.textChannelId ? \r\n                                        props.computedMatch.params.textChannelId : Object.keys(props.groupServers[props.computedMatch.params.groupServerId].textChannels)[0]}\r\n                        user={props.user}/>\r\n                    </>\r\n                )\r\n                :\r\n                <Redirect to=\"/dashboard\" />)\r\n           }\r\n       </>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function Loading() {\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-center align-items-center flex-column bg-secondary\" style={{height: \"100vh\"}}>\r\n      <h1 className=\"text-light\">Loading...</h1>\r\n      <div className=\"spinner-border\" \r\n        style={{width: \"20rem\", height: \"20rem\", color: \"whitesmoke\"}} \r\n        role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Loading from '../auth/Loading';\r\n\r\nexport default function JoinGroupServer(props){\r\n\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n    const history = useHistory();\r\n\r\n    useEffect(async ()=>{\r\n        let groupServerId;\r\n        if (props.computedMatch.params.inviteCode){\r\n            await fetch('http://localhost:3000/api/groupServer/join', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': localStorage.getItem('Authorization')\r\n                    },\r\n                    body: JSON.stringify({\r\n                        type: \"join\",\r\n                        inviteCode: props.computedMatch.params.inviteCode,\r\n                        userId: props.user._id\r\n                    }),\r\n                    signal\r\n                }).then(response => { return response.json(); })\r\n                    .then((data) => {\r\n                        if (data.success){\r\n                            groupServerId = data.groupServerId;\r\n                            let groupServers = {...props.groupServers};\r\n                            groupServers[groupServerId] = data.groupServer;\r\n                            props.setGroupServers({...groupServers});\r\n                            history.push(\"/group/\"+groupServerId);\r\n                        }\r\n                        else {\r\n                            console.log(data.message)\r\n                            history.push(\"/dashboard\");\r\n                        };\r\n                    });\r\n        }\r\n        return function cleanup(){\r\n           controller.abort();\r\n        }\r\n    }, []);\r\n\r\n    return(\r\n        <Loading />\r\n    )\r\n}","import React from 'react';\r\nimport {Dialog, DialogTitle, DialogContent } from '@material-ui/core';\r\n\r\nexport default function Popup(props){\r\n    const {title, children, openPopup, setOpenPopup, ...others} = props;\r\n\r\n    const onEscapeKeyDown = () => {\r\n        setOpenPopup(false);\r\n    }\r\n\r\n    return(\r\n        <Dialog open={openPopup} maxWidth=\"md\" onEscapeKeyDown={onEscapeKeyDown}>\r\n            <DialogTitle>\r\n                <div>{title}</div>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {React.cloneElement(children,{openPopup: openPopup, setOpenPopup: setOpenPopup, others: others})}\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n}","import React, { useState, useEffect} from 'react';\r\n\r\nexport default function CreateServerForm(props){\r\n\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n    const [input, setInput] = useState(props.user.name + \"'s Server\");\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        return function cleanup(){\r\n            controller.abort();\r\n        }\r\n    }, []);\r\n\r\n    async function handleSubmit(e){\r\n        e.preventDefault();\r\n        setLoading(true);\r\n\r\n        try{\r\n            fetch('http://localhost:3000/api/groupServer/create', {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': localStorage.getItem('Authorization')\r\n              },\r\n              body: JSON.stringify({\r\n                type: \"create\",\r\n                name: input,\r\n                userId: props.user._id\r\n              }),\r\n              signal\r\n            }).then(response => { return response.json(); })\r\n                .then((data) => {\r\n                    if(data.success){\r\n                        let groupServers = {...props.groupServers};\r\n                        groupServers[data.groupServerId] = data.groupServer;\r\n                        props.setGroupServers({...groupServers});\r\n                    }\r\n                });\r\n        }finally{\r\n            setLoading(false);\r\n            props.setOpenPopup(false);\r\n        }\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    return(\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"createServerInput\">Group Server Name</label>\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    id=\"createServerInput\" \r\n                    aria-describedby=\"serverInputHelp\" \r\n                    value={input}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </div>\r\n            <button type=\"submit\" disabled={loading} className=\"btn btn-primary\" onClick={handleSubmit}>Create</button>\r\n        </form>\r\n    );\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Popup from \"./popups/Popup.js\";\r\nimport CreateServerForm from \"./popups/CreateServerForm.js\";\r\n\r\nexport default function ServersList(props){\r\n\r\n    const [openPopupCreate, setOpenPopupCreate] = useState(false);\r\n\r\n    //Displays the group servers the user is a member of\r\n    //Group Server name will be highlighted \"#b5fff3\" if the user is in that group server page\r\n    function displayServers(){\r\n        if (props.groupServers){\r\n            return(\r\n                <>\r\n                {\r\n                    Object.entries(props.groupServers).map(([key,value]) => {\r\n                        if (value){\r\n                            const textChannelId = Object.keys(value.textChannels)[0];\r\n                            return(\r\n                                <li key={key}>\r\n                                    {\r\n                                    props.groupServerId === key ?\r\n                                    <Link onClick={(e) => e.preventDefault()} style={{color: \"#b5fff3\"}} to={{pathname: \"/group/\"+key+\"/\"+textChannelId}} >\r\n                                        {value.name}\r\n                                    </Link>\r\n                                    :\r\n                                    <Link className=\"text-reset\" to={{pathname: \"/group/\"+key+\"/\"+textChannelId}} >\r\n                                        {value.name}\r\n                                    </Link>\r\n                                    }\r\n                                </li>\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper w-100\">\r\n            <nav id=\"sidebar\">\r\n                <div>\r\n                    <h5 className=\"text-white\">Budget-Discord</h5>\r\n                </div>\r\n\r\n                <ul className=\"list-unstyled text-white\">\r\n                    <li>\r\n                        <Link className=\"text-reset\" to=\"/dashboard\">Dashboard</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link className=\"text-reset\" to=\"/friends\">Friends</Link>\r\n                    </li>\r\n                    {displayServers()}\r\n                    <li onClick = {() => {if(!openPopupCreate) setOpenPopupCreate(true)}}>\r\n                    <Link className=\"text-reset\" to=\"#\">Create Server</Link>\r\n                        <Popup\r\n                        title={\"Create New Server\"}\r\n                        openPopup = {openPopupCreate}\r\n                        setOpenPopup = {setOpenPopupCreate}\r\n                        >\r\n                            <CreateServerForm \r\n                            user={props.user}\r\n                            groupServers = {props.groupServers}\r\n                            setGroupServers = {props.setGroupServers}\r\n                            />\r\n                        </Popup>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    );\r\n};","require(\"dotenv\").config();\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport GroupServer from '../groupserver/GroupServer.js';\r\nimport JoinGroupServer from '../groupserver/JoinGroupServer.js'\r\nimport ServersList from '../ServersList.js';\r\nimport Loading from './Loading';\r\nconst ws = new WebSocket(\"ws://localhost:1000\");\r\n\r\n// Component creating a private route\r\nexport default function PrivateRoute({ component: Component, ...rest}) {\r\n\r\n  const controller = new AbortController();\r\n  const {signal} = controller;\r\n  const [success, setSuccess] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [mounted, setMounted] = useState(true);\r\n  const [groupServers, setGroupServers] = useState({});\r\n\r\n  const [user, _setUser] = useState();\r\n  const userRef = useRef(user);\r\n  const setUser = async (data) => {\r\n    userRef.current = data;\r\n    _setUser(data);\r\n  }\r\n\r\n  const [chatLogs, _setChatLogs] = useState({});\r\n  const chatLogsRef = useRef(chatLogs);\r\n  const setChatLogs = (data) => {\r\n    chatLogsRef.current = data;\r\n    _setChatLogs(data);\r\n  };\r\n\r\n  useEffect(async () => {\r\n    //Set up websocket\r\n    if (ws){\r\n      ws.addEventListener('message', handleWSSMessage);\r\n    }\r\n\r\n    //Verify user\r\n    await fetch(\"http://localhost:3000/api/user/verify\", {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': localStorage.getItem('Authorization')\r\n      },\r\n    }).then(response => { if(mounted) return response.json() })\r\n      .then((data) => { \r\n        if(mounted){\r\n          setUser(data.user);\r\n          setSuccess(data.success);\r\n        }\r\n        if (!data.success) console.log(data.message);\r\n    }).catch(error => (mounted ? setSuccess(false): null));\r\n\r\n    //Populate groupServers state\r\n    await fetch(\"http://localhost:3000/api/groupServer/find\", {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': localStorage.getItem('Authorization')\r\n        },\r\n        body: JSON.stringify({\r\n            type: \"find\",\r\n            userId: userRef.current._id\r\n        }),\r\n        signal\r\n    }).then(response => { if(mounted) return response.json(); })\r\n      .then((data) => {\r\n        if (data.success) setGroupServers({...data.groupServers});     \r\n        else console.log(data.message); \r\n    });\r\n\r\n    setLoading(false);\r\n\r\n    return () => {\r\n      setMounted(false);\r\n      controller.abort();\r\n    }\r\n  }, [])\r\n\r\n  // Repeatedly attempts to contact ws server with \"callback\" until ws server is online\r\n  function waitForWSConnection(callback, interval){\r\n    if(ws){\r\n      if (ws.readyState === WebSocket.OPEN) callback();\r\n      else{\r\n        setTimeout(() => {\r\n          waitForWSConnection(callback, interval);\r\n        }, interval);\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleWSSMessage(message){\r\n    if (mounted){\r\n      let parsedMessage;\r\n      try{\r\n          parsedMessage = JSON.parse(message.data);\r\n      } catch(e){\r\n          console.log(\"Message from wss could not be parsed!\", message);\r\n          return;\r\n      }\r\n\r\n      //Check whether message from ws server is valid\r\n      if (parsedMessage.type === \"message\"){\r\n        let _chatLogs = {...chatLogsRef.current};\r\n        const index = _chatLogs[parsedMessage.textChannelId].length - 1;\r\n        _chatLogs[parsedMessage.textChannelId][index] = parsedMessage.message;\r\n        setChatLogs({..._chatLogs});\r\n      }\r\n    }\r\n  }\r\n\r\n  function sendMessage(message, groupServerId, textChannelId){\r\n    if (mounted){\r\n      //Create data \r\n      const data = {\r\n        type: \"message\",\r\n        textChannelId: textChannelId,\r\n        serverId: groupServerId,\r\n        message: message\r\n      };\r\n      //Send data over to ws server\r\n      waitForWSConnection(()=>{\r\n        ws.send(JSON.stringify(data));\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  if(!loading) return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row\">\r\n      <Route\r\n        {...rest}\r\n        render={(props) =>{\r\n          return (success) ? \r\n          <>\r\n            <div className=\"col-1\" style={{minHeight: \"100vh\", background: \"#212121\"}}>\r\n              <ServersList \r\n                user={user} \r\n                setUser={setUser} \r\n                groupServerId={rest.computedMatch.params.groupServerId}\r\n                groupServers={groupServers}\r\n                setGroupServers={setGroupServers}/>\r\n            </div>\r\n            <Component\r\n              {...rest} \r\n              groupServers={(Component === GroupServer || Component === JoinGroupServer) ? groupServers : undefined} \r\n              setGroupServers={(Component === GroupServer || Component === JoinGroupServer) ? setGroupServers : undefined}\r\n              chatLogs={(Component === GroupServer) ? chatLogs : undefined}\r\n              setChatLogs={(Component === GroupServer) ? setChatLogs : undefined}\r\n              sendMessage={(Component === GroupServer) ? sendMessage : undefined}\r\n              user={user} \r\n              setUser={setUser}\r\n              props={props}/> \r\n          </>\r\n          : \r\n          <Redirect to=\"/login\" />;\r\n        }}\r\n      ></Route>\r\n      </div>\r\n    </div>\r\n  );\r\n  else{\r\n    return <Loading/>\r\n  }\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function FriendRequests(props) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [pressed, setPressed] = useState(false);\r\n\r\n  async function handleFriendRequestAccept(e){\r\n    props.setError('');\r\n    e.preventDefault();\r\n\r\n    try{\r\n      setLoading(true);\r\n      await fetch('http://localhost:3000/api/friends/accept-friend-request', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': localStorage.getItem('Authorization')\r\n        },\r\n        body: JSON.stringify({\r\n          friendID: props.friend.id\r\n        })\r\n      }).then(response => {\r\n        return response.json()})\r\n        .then((data) => {\r\n          if(data.success) console.log(data.message);\r\n          else props.setError(data.message);\r\n        })\r\n      setPressed(true);\r\n    }\r\n    finally{\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex m-2 mx-auto\" style={{maxWidth: \"800px\"}}>\r\n      <p className=\"mr-auto p-2\">{props.friend.name} #{props.friend.numberID} </p>\r\n      <button \r\n        disabled={loading || pressed} \r\n        className=\"btn btn-primary\" \r\n        onClick={handleFriendRequestAccept} >{pressed ? \"Accepted\" : \"Accept Friend Request\"}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function FriendsList(props) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [pressed, setPressed] = useState(false);\r\n\r\n  async function handleFriendDelete(e){\r\n    e.preventDefault();\r\n\r\n    try{\r\n      props.setError('');\r\n      setLoading(true);\r\n      await fetch('http://localhost:3000/api/friends/delete-friend', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': localStorage.getItem('Authorization')\r\n        },\r\n        body: JSON.stringify({\r\n          friendID: props.friend.id\r\n        })\r\n      }).then(response => {\r\n        return response.json()})\r\n        .then((data) => {\r\n          if(data.success) console.log(data.message);\r\n          else props.setError(data.message);\r\n        })\r\n      setPressed(true);\r\n    }\r\n    finally{\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex m-2 mx-auto\" style={{maxWidth: \"800px\"}} key={props.friend.id}>\r\n      <p className=\"mr-auto p-2\">{props.friend.name} #{props.friend.numberID} </p>\r\n      <button \r\n        disabled={loading || pressed} \r\n        className=\"btn btn-primary\" \r\n        onClick={handleFriendDelete}>{pressed ? \"Removed\" : \"Remove Friend\"}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function SearchFriends(props) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [pressed, setPressed] = useState(false);\r\n\r\n  async function handleFriendRequest(e){\r\n    e.preventDefault();\r\n\r\n    try{\r\n      props.setError('');\r\n      setLoading(true);\r\n      await fetch('http://localhost:3000/api/friends/send-friend-request', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': localStorage.getItem('Authorization')\r\n        },\r\n        body: JSON.stringify({\r\n          friendID: props.friend.id\r\n        })\r\n      }).then(response => {\r\n        return response.json()})\r\n        .then((data) => {\r\n          if(data.success) console.log(data.message);\r\n          else props.setError(data.message);\r\n        })\r\n      setPressed(true);\r\n    }\r\n    finally{\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  console.log(props.props)\r\n\r\n  return (\r\n    <div className=\"d-flex m-2\">\r\n      <p className=\"mr-auto p-2\">{props.friend.name} #{props.friend.numberID} </p>\r\n      <button \r\n        disabled={loading || pressed} \r\n        className=\"btn btn-primary\" \r\n        onClick={handleFriendRequest}\r\n      >\r\n        {pressed ? \"Added\": \"AddFriend\"}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport { Form, Button, Alert, Container } from 'react-bootstrap';\r\nimport FriendRequests from './FriendRequests';\r\nimport FriendsList from './FriendsList';\r\nimport SearchFriends from './SearchFriends';\r\n\r\n// Simple Login page\r\n\r\nexport default function Friend(props) {\r\n  const friendNameRef = useRef();\r\n  const friendNumberRef = useRef();\r\n  const [friends, setFriends] = useState([]);\r\n  const [friendResults, setFriendResults] = useState([]);\r\n  const [showFriendRequests, setShowFriendRequests] = useState(false);\r\n  const [friendRequests, setFriendRequests] = useState([]);\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState();\r\n\r\n  async function handleSubmit(e){\r\n    e.preventDefault();\r\n\r\n    try{\r\n      setError('');\r\n      setLoading(true);\r\n      setFriendResults([]);\r\n      await fetch('http://localhost:3000/api/friends/find-users', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': localStorage.getItem('Authorization')\r\n        },\r\n        body: JSON.stringify({\r\n          friendName: friendNameRef.current.value,\r\n          friendNumber: friendNumberRef.current.value\r\n        })\r\n      }).then(response => {\r\n        return response.json()})\r\n        .then((data) => {\r\n          if(data.success) {\r\n            if(data.friendResult.length == 0){\r\n              setError('No Users found')\r\n            }\r\n            else{\r\n              setFriendResults(data.friendResult);\r\n            }\r\n          }\r\n          else setError(data.message);\r\n        })\r\n    }\r\n    finally{\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  useEffect(async () =>{\r\n    setShowFriendRequests(false);\r\n    await fetch('http://localhost:3000/api/friends/get-friend-requests', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': localStorage.getItem('Authorization')\r\n      },\r\n    }).then(response => {\r\n      return response.json()})\r\n      .then((data) => {\r\n        if(data.success) setFriendRequests(data.friendRequests);\r\n        else setError(data.message);\r\n      })\r\n    await fetch('http://localhost:3000/api/friends/get-friends', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': localStorage.getItem('Authorization')\r\n      },\r\n    }).then(response => {\r\n      return response.json()})\r\n      .then((data) => {\r\n        if(data.success) setFriends(data.friends);\r\n        else setError(data.message);\r\n      })\r\n    setShowFriendRequests(true);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"col-11 my-auto bg-secondary d-flex-column\" style={{minHeight: \"100vh\"}}>\r\n      {showFriendRequests ? friends.map((friend) => <FriendsList setError={setError} key={friend.id} friend={friend} />) : <div></div> }\r\n      <hr />\r\n      {showFriendRequests ? friendRequests.map((friend) => <FriendRequests setError={setError} key={friend.id} friend={friend} />) : <div> </div>}\r\n      <div className=\"card mx-auto\" style={{maxWidth: \"400px\"}}>\r\n        <div className=\"card-body bg-light\">\r\n          <div className=\"card-header text-center mb-4\">\r\n            <h2>Find Friend</h2>\r\n          </div>\r\n          {error && <Alert variant=\"danger\">{error}</Alert>}\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Group id=\"friend\">\r\n              <Form.Label>Enter Friend's Name</Form.Label>\r\n              <Form.Control type=\"text\" ref={friendNameRef}></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group id=\"number_id\">\r\n              <Form.Label>Enter Friend's Number ID (Optional)</Form.Label>\r\n              <Form.Control type=\"text\" ref={friendNumberRef}></Form.Control>\r\n            </Form.Group>\r\n            <Button disabled={loading} className=\"w-25\" type=\"Submit\">Find</Button>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n      <div className=\"mx-auto\" style={{maxWidth: \"800px\"}}>\r\n        {friendResults.map((friend) => <SearchFriends setError={setError} key={friend.id} friend={friend} />)}\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React, { useRef, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\n// // Simple Update Profile page\r\n\r\nexport default function ChangeName(props) {\r\n  const [user, setUser] = useState(props.user);\r\n  const nameRef = useRef();\r\n  const passwordRef = useRef();\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState();\r\n  const history = useHistory();\r\n\r\n  async function handleSubmit(e){\r\n    e.preventDefault();\r\n\r\n    try{\r\n      setLoading(true);\r\n      await fetch('http://localhost:3000/api/user/change-name', {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': localStorage.getItem('Authorization')\r\n        },\r\n        body: JSON.stringify({\r\n          name: nameRef.current.value,\r\n          password: passwordRef.current.value\r\n        })\r\n      }).then(response => { return response.json() })\r\n        .then(data => {\r\n          if(!data.success) setError(data.message);\r\n          else history.push(\"/dashboard\");\r\n      })\r\n    }\r\n    finally{\r\n      setLoading(false);\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"col-11 my-auto\">\r\n      <div className=\"card mx-auto\" style={{maxWidth: \"400px\"}}>\r\n        <div className=\"card-body\">\r\n          <div className=\"card-header text-center mb-4\">\r\n            <h2>Change Name</h2>\r\n          </div>\r\n          {error && <div className=\"alert alert-danger\" role=\"alert\">{error}</div>}\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"mb-3\" id=\"old-password\">\r\n              <label htmlFor=\"input-old-password\">Name</label>\r\n              <input className=\"form-control\" type=\"name\" id=\"input-name\" ref={nameRef} required></input>\r\n            </div>\r\n            <div className=\"mb-3\" id=\"password\">\r\n              <label htmlFor=\"input-password\">Password</label>\r\n              <input className=\"form-control\" type=\"password\" id=\"input-password\" ref={passwordRef} required></input>\r\n            </div>\r\n            <button disabled={loading} className=\"btn btn-primary w-25\" type=\"Submit\">Update</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div className=\"w-100 text-center mt-2\">\r\n        <Link to=\"/dashboard\">Cancel</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","import React, { useRef, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\n// // Simple Update Profile page\r\n\r\nexport default function DeleteAccount(props) {\r\n  const [user, setUser] = useState(props.user);\r\n  const passwordRef = useRef();\r\n  const passwordConfirmRef = useRef();\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState();\r\n  const history = useHistory();\r\n\r\n  async function handleSubmit(e){\r\n    e.preventDefault();\r\n\r\n    if(passwordRef.current.value !== passwordConfirmRef.current.value){\r\n      return setError('Passwords do not match');\r\n    }\r\n\r\n    try{\r\n      setLoading(true);\r\n      await fetch('http://localhost:3000/api/user/delete-account', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': localStorage.getItem('Authorization')\r\n        },\r\n        body: JSON.stringify({\r\n          password: passwordRef.current.value\r\n        })\r\n      }).then(response => { return response.json() })\r\n        .then(data => {\r\n          if(!data.success) setError(data.message);\r\n          else history.push(\"/login\");\r\n      })\r\n    }\r\n    finally{\r\n      setLoading(false);\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"col-11 my-auto\">\r\n      <div className=\"card mx-auto\" style={{maxWidth: \"400px\"}}>\r\n        <div className=\"card-body\">\r\n          <div className=\"card-header text-center mb-4\">\r\n            <h2>Delete Account</h2>\r\n          </div>\r\n          {error && <div className=\"alert alert-danger\" role=\"alert\">{error}</div>}\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"mb-3\" id=\"password\">\r\n              <label htmlFor=\"input-password\">Enter Password to Delete Account</label>\r\n              <input className=\"form-control\" type=\"password\" id=\"input-password\" ref={passwordRef} required></input>\r\n            </div>\r\n            <div className=\"mb-3\" id=\"password-confirm\">\r\n              <label htmlFor=\"input-password-confirm\">Confirm Password</label>\r\n              <input className=\"form-control\" type=\"password\" id=\"input-password-confirm\" ref={passwordConfirmRef} required></input>\r\n            </div>\r\n            <button disabled={loading} className=\"btn btn-primary w-25\" type=\"Submit\">Update</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div className=\"w-100 text-center mt-2\">\r\n        <Link to=\"/dashboard\">Cancel</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\n// // Simple Update Profile page\r\n\r\nexport default function ChangePassword(props) {\r\n  const [user, setUser] = useState(props.user);\r\n  const oldPasswordRef = useRef();\r\n  const passwordRef = useRef();\r\n  const passwordConfirmRef = useRef();\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState();\r\n  const history = useHistory();\r\n\r\n  async function handleSubmit(e){\r\n    e.preventDefault();\r\n\r\n    if(passwordRef.current.value !== passwordConfirmRef.current.value){\r\n      return setError('Passwords do not match');\r\n    }\r\n\r\n    try{\r\n      setLoading(true);\r\n      await fetch('http://localhost:3000/api/user/change-password', {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': localStorage.getItem('Authorization')\r\n        },\r\n        body: JSON.stringify({\r\n          email: user.email,\r\n          oldPassword: oldPasswordRef.current.value,\r\n          password: passwordRef.current.value\r\n        })\r\n      }).then(response => { return response.json() })\r\n        .then(data => {\r\n          if(!data.success) setError(data.message);\r\n          else history.push(\"/dashboard\");\r\n      })\r\n    }\r\n    finally{\r\n      setLoading(false);\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"col-11 my-auto\">\r\n      <div className=\"card mx-auto\" style={{maxWidth: \"400px\"}}>\r\n        <div className=\"card-body\">\r\n          <div className=\"card-header text-center mb-4\">\r\n            <h2>Update Profile</h2>\r\n          </div>\r\n          {error && <div className=\"alert alert-danger\" role=\"alert\">{error}</div>}\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"mb-3\" id=\"old-password\">\r\n              <label htmlFor=\"input-old-password\">Old Password</label>\r\n              <input className=\"form-control\" type=\"password\" id=\"input-old-password\" ref={oldPasswordRef} required></input>\r\n            </div>\r\n            <div className=\"mb-3\" id=\"password\">\r\n              <label htmlFor=\"input-password\">Password</label>\r\n              <input className=\"form-control\" type=\"password\" id=\"input-password\" ref={passwordRef} required></input>\r\n            </div>\r\n            <div className=\"mb-3\" id=\"password-confirm\">\r\n              <label htmlFor=\"input-password-confirm\">Confirm Password</label>\r\n              <input className=\"form-control\" type=\"password\" id=\"input-password-confirm\" ref={passwordConfirmRef} required></input>\r\n            </div>\r\n            <button disabled={loading} className=\"btn btn-primary w-25\" type=\"Submit\">Update</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div className=\"w-100 text-center mt-2\">\r\n        <Link to=\"/dashboard\">Cancel</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Signup from \"./auth/Signup\"\r\nimport Dashboard from \"./auth/Dashboard\";\r\nimport Login from \"./auth/Login\";\r\nimport PrivateRoute from \"./auth/PrivateRoute\";\r\nimport GroupServer from './groupserver/GroupServer.js';\r\nimport Friends from './friends/Friends'\r\nimport JoinGroupServer from './groupserver/JoinGroupServer.js';\r\nimport ChangeName from './auth/ChangeName';\r\nimport DeleteAccount from './auth/DeleteAccount';\r\nimport ChangePassword from './auth/ChangePassword';\r\nimport FindFriends from './popups/FindFriends'\r\n\r\nexport default function App() {\r\n  /*\r\n    To create a path, create a Route/PrivateRoute Component.\r\n    Route/PrivateRoute attributes\r\n      path (required): string containing the path of the page\r\n      component (required): component to be rendered\r\n      exact: path must be exactly the same as the path\r\n              prevents overriding of pages ex. goes to \"/\" instead of \"/login\" without exact\r\n              \r\n    PrivateRoute is for pages that require users to be logged in\r\n  */\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Switch>\r\n          <PrivateRoute exact path=\"/\" component={Dashboard} />\r\n          <PrivateRoute exact path=\"/friends\" component={Friends} />\r\n          <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\r\n          <PrivateRoute exact path=\"/change-name\" component={ChangeName} />\r\n          <PrivateRoute exact path=\"/change-password\" component={ChangePassword} />\r\n          <PrivateRoute exact path=\"/delete-account\" component={DeleteAccount} />\r\n          <PrivateRoute exact path=\"/group/:groupServerId\" component={GroupServer} />\r\n          <PrivateRoute exact path=\"/group/:groupServerId/:textChannelId\" component={GroupServer} />\r\n          <PrivateRoute exact path=\"/join/:inviteCode\" component={JoinGroupServer}/>\r\n          <Route path=\"/signup\" component={Signup} />\r\n          <Route path=\"/login\" component={Login} />\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n","require('dotenv').config();\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}